<?php
// $Id$

/**
 * Implementation of hook_init().
 */
function icon_init() {
  init_theme(); // TODO: Must. Do. Better.
  global $icons, $theme;

  // Retrieve icons for current theme from cache (or rebuild).
  $icons = icon_get_icons($theme);

  // Add icon stylesheet file, if one has been generated for this theme.
  $stylesheet = variable_get('icon_'. $theme .'_stylesheet', NULL);
  if ($stylesheet) {
    drupal_add_css($stylesheet, 'theme', all, FALSE);
  }
}

/**
 * Implementation of hook_theme().
 */
function icon_theme() {
  return array(
    'icon' => array(
      'arguments' => array('name' => NULL, 'size' => NULL),
    ),
    'icon_iconsets_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function icon_perm() {
  return array('administer icons');
}

/**
 * Implementation of hook_menu().
 */
function icon_menu() {
  // Global settings:
  $items['admin/build/icon'] = array(
    'title' => 'Icons',
    'description' => 'Administer icon sets.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('icon_settings_form'),
    'access arguments' => array('administer icons'),
  );
  $items['admin/build/icon/settings'] = array(
    'title' => 'Global settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  // Icon configuration for enabled themes:
  require_once('includes/theme.inc');
  $themes = list_themes();
  foreach ($themes as $key => $theme) {
    // Only show themes with icons, or with base themes with icons.
    if ($theme->status && (is_array($theme->info['icons']) || ($themes[$theme->base_theme]->status && $themes[$theme->base_theme]->info['icons']))) {
      $items['admin/build/icon/'. $key] = array(
        'title' => $theme->info['name'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array('icon_iconsets_form', $key),
        'access arguments' => array('administer icons'),
        'type' => MENU_LOCAL_TASK,
      );
    }
  }

  return $items;
}

/**
 * Menu callback; displays configuration options for all themes.
 */
function icon_settings_form(&$form_state) {
  $form['todo'] = array(
    '#value' => '<p>TODO: Figure out if this page is really needed.</p><p>For now, use the tabs above to configure themes. If you see no other tabs, you have no icons enabled themes.</p>',
  );

  return $form;
}

/**
 * Menu callback; displays a listing of all icon sets.
 *
 * @see theme_icon_iconsets_form()
 */
function icon_iconsets_form(&$form_state, $theme) {
  $themes = list_themes();

  // Fetch all icon sets available to the specified theme.
  $iconsets = icon_get_iconsets($theme);

  // Fetch icon set statuses and weights for the specified theme.
  icon_get_iconset_data($iconsets, $theme);

  // Sort the icon sets.
  uasort($iconsets, '_icon_sort_iconsets');

  $form = array('#tree' => TRUE);

  $form['theme'] = array(
    '#type' => 'value',
    '#value' => $theme,
  );

  // Add form elements for all available icon sets:
  foreach ($iconsets as $key => $iconset) {
    $screenshot = $iconset['path'] .'/'. $iconset['screenshot'];
    if ($iconset['screenshot'] && file_exists($screenshot)) {
      $form[$key]['screenshot']['#value'] = theme('image', $screenshot, t('Screenshot for %iconset icon set', array('%iconset' => $iconset['name'])), '', array('class' => 'screenshot'), FALSE);
    }
    else {
      $form[$key]['screenshot']['#value'] = t('no screenshot');
    }

    $form[$key]['iconset'] = array(
      '#type' => 'value',
      '#value' => $iconset,
    );

    $form[$key]['status'] = array(
      '#type' => 'checkbox',
      '#default_value' => isset($form_state[$key]['status']) ? $form_state[$key]['status'] : $iconset['status'],
    );

    $form[$key]['weight'] = array(
      '#type' => 'weight',
      '#delta' => 10,
      '#default_value' => isset($form_state[$key]['weight']) ? $form_state[$key]['weight'] : $iconset['weight'],
    );
  }

  if (count($iconsets)) {
    $form['buttons']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save configuration'),
    );
    $form['buttons']['reset'] = array(
      '#type' => 'submit',
      '#value' => t('Reset to defaults'),
    );
  }

  return $form;
}

/**
 * Process icon_iconsets_form form submissions.
 */
function icon_iconsets_form_submit($form, &$form_state) {
  $theme = $form_state['values']['theme'];

  // Build an array of icon sets and their statuses and weights.
  $iconsets = array();
  foreach ($form_state['values'] as $key => $value) {
    if (is_array($form_state['values'][$key]['iconset'])) {
      if ($form_state['values']['op'] == t('Save configuration')) {
        $iconsets[$key] = array(
          'status' => $form_state['values'][$key]['status'],
          'weight' => $form_state['values'][$key]['weight'],
        );
      }
    }
  }

  // Save changes to the icon sets.
  _icon_save_iconsets($iconsets, $theme);

  // Rebuild the cache of icons for the specified theme.
  $icons = icon_get_icons($theme, TRUE);

  // Rewrite stylesheets.
  icon_rewrite_stylesheets($icons, $theme);

  drupal_set_message(t('The configuration options have been saved.'));
}

/**
 * Save statuses and weights for icon sets.
 *
 * @param $iconsets
 *   An array of icon sets to save.
 * @param $theme
 *   The theme for which to save statuses.
 */
function _icon_save_iconsets($iconsets, $theme) {
  $result = db_query("SELECT iconset, status, weight FROM {iconsets} WHERE theme = '%s'", $theme);

  while ($item = db_fetch_object($result)) {
    if ($iconsets[$item->iconset] === NULL) {
      // Delete the icon set from the database if it no longer exists.
      db_query("DELETE FROM {iconsets} WHERE iconset = '%s' AND theme = '%s'", $item->iconset, $theme);
    }
    elseif ($iconsets[$item->iconset]['status'] != $item->status || $iconsets[$item->iconset]['weight'] != $item->weight) {
      // Update the icon set if its status or weight has changed.
      db_query("UPDATE {iconsets} SET status = %d, weight = %d WHERE iconset = '%s' AND theme = '%s'", $iconsets[$item->iconset]['status'], $iconsets[$item->iconset]['weight'], $item->iconset, $theme);
    }

    // Remove the processed icon set from the array.
    unset($iconsets[$item->iconset]);
  }

  // Any remaining icon sets are new and should be saved.
  foreach ($iconsets as $key => $iconset) {
    db_query("INSERT INTO {iconsets} (iconset, theme, status, weight) VALUES ('%s', '%s', %d, %d)", $key, $theme, $iconset['status'], $iconset['weight']);
  }
}

/**
 * Adds the statuses and weights to icon sets for a particular theme.
 *
 * @param $iconsets
 *   An array of icon sets to check.
 * @param $theme
 *   The theme to check for status against.
 */
function icon_get_iconset_data(&$iconsets, $theme) {
  $result = db_query("SELECT iconset, status, weight FROM {iconsets} WHERE theme = '%s'", $theme);
  while ($item = db_fetch_object($result)) {
    $data[$item->iconset] = $item;
  }

  foreach ($iconsets as $key => $iconset) {
    if (!isset($data[$key])) {
      $data[$key]->weight = 0;
      $data[$key]->status = ($iconsets[$key]['type'] == 'iconset' ? 0 : 1);
    }
    $iconsets[$key]['weight'] = $data[$key]->weight;
    $iconsets[$key]['status'] = ($iconsets[$key]['type'] == 'iconset' ? $data[$key]->status : 1);
  }
}

/**
 * Collect data about available icon sets.
 *
 * @param $theme
 *   The theme to get available icons for.
 * @param $reset
 *   (optional) Set to TRUE to reset the in-memory cache.
 * @return
 *   An array of icon sets and their icons.
 */
function icon_get_iconsets($theme, $reset = FALSE) {
  static $iconsets = array();

  if (empty($iconsets) || $reset) {
    $infos = array();

    // Fetch information about standalone icon sets.
    $standalone_iconsets = icon_find_iconsets();
    foreach ($standalone_iconsets as $iconset) {
      $infos[$iconset->name] = $iconset->info;
      $iconsets[$iconset->name] = array(
        'name' => $iconset->info['name'],
        'description' => t($iconset->info['description']),
        'screenshot' => $iconset->info['screenshot'],
        'path' => dirname($iconset->filename),
        'type' => 'iconset',
      );
    }

    $themes = list_themes();

    // Fetch information about enabled system components that provide icons.
    $result = db_query("SELECT filename, name, type, info FROM {system} WHERE type <> 'iconset' AND status = 1 ORDER BY weight DESC");
    while ($component = db_fetch_object($result)) {

      // Make sure we don't fetch other themes' icons.
      if ($component->type == 'theme' && $component->name != $theme && $component->name != $themes[$theme]->base_theme) {
        continue;
      }

      // Only add components that provide icons.
      $info = unserialize($component->info);
      if ($info['icons']) {
        $infos[$component->name] = $info;
        $iconsets[$component->name] = array(
          'name' => $info['name'],
          'description' => t('Icons provided by %name.', array('%name' => $info['name'])),
          'path' => dirname($component->filename),
          'type' => $component->type,
        );
      }

    }

    // Locate icon files for the discovered icon sets.
    foreach ($iconsets as $key => $iconset){

      // Add paths to any icon size folders found.
      if (is_array($infos[$key]['sizes'])) {
        foreach ($infos[$key]['sizes'] as $size => $folder) {
          $path = $iconset['path'] .'/'. $folder;
          if (is_dir($path)) {
            $iconsets[$key]['sizes'][$size] = $path;
          }
        }
      }

      // Add paths to all icons in any provided sizes.
      if (is_array($infos[$key]['icons'])) {
        foreach ($infos[$key]['icons'] as $icon_name => $value) {

          // The icon has been declared with specific icon sizes, so look in the
          // specified path.
          if (is_array($value)) {
            foreach ($value as $size => $file) {
              $path = $iconset['path'] .'/'. $file;
              if (file_exists($path)) {
                $iconsets[$key]['icons'][$icon_name][$size] = $path;
              }
            }
          }

          // The icon has no specific size or path specified, so look in all
          // specified size folders.
          elseif ($iconsets[$key]['sizes']) {
            foreach ($iconsets[$key]['sizes'] as $size => $size_folder) {
              $path = $size_folder .'/'. $value;
              if (file_exists($path)) {
                $iconsets[$key]['icons'][$icon_name][$size] = $path;
              }
            }
          }

        }
      }

      // Remove any icon sets whose declared icon files doesn't exist.
      if (empty($iconsets[$key]['icons'])) {
        unset($iconsets[$key]);
      }

    }

  }

  return $iconsets;
}

/**
 * Find all standalone icon sets.
 *
 * @return
 *   An array of icon set files.
 */
function icon_find_iconsets() {
  // Find standalone icon sets' .info files.
  $iconsets = drupal_system_listing('\.info$', 'icons', 'name', 0);

  // Extract current icon sets from database.
  system_get_files_database($iconsets, 'iconsets');

  // Set defaults for icon sets.
  $defaults = array(
    'name' => '',
    'description' => '',
    'screenshot' => 'screenshot.png',
  );

  // Add .info file's content to each icon set.
  foreach ($iconsets as $key => $iconset) {
    $iconsets[$key]->info = drupal_parse_info_file($iconset->filename) + $defaults;
  }

  $result = db_query("SELECT filename, name, info FROM {system} WHERE type = 'iconset'");
  while ($item = db_fetch_object($result)) {
    // Flag the icon set as processed.
    $iconsets[$item->name]->processed = TRUE;

    // Serialize the .info data.
    $info = serialize($iconsets[$item->name]->info);

    if (($iconsets[$item->name] === NULL) || !file_exists($item->filename)) {
      // Delete {system} and array entries if the icon set no longer exists.
      db_query("DELETE FROM {system} WHERE name = '%s'", $item->name);
      unset($iconsets[$item->name]);
    }
    elseif ($item->info != $info) {
      // Update the {system} entry if its info has changed.
      db_query("UPDATE {system} SET info = '%s' WHERE name = '%s'", $info);
    }
  }

  foreach ($iconsets as $key => $iconset) {
    if ($iconset->processed) {
      // The icon set has already been processed, so remove the flag.
      unset($iconsets[$key]->processed);
    }
    else {
      // Any icon sets that have not been processed should be stored.
      db_query("INSERT INTO {system} (name, owner, info, type, filename, status, throttle, bootstrap) VALUES ('%s', '%s', '%s', '%s', '%s', %d, %d, %d)", $iconset->name, '', serialize($iconset->info), 'iconset', $iconset->filename, $iconset->status, 0, 0);
    }
  }

  return $iconsets;
}

/**
 * Collect an array of all icons available to the specified theme.
 *
 * @param $theme
 *   Name of the theme for which to get available icons.
 * @param $reset
 *   (optional) Set to TRUE to reset the cache.
 * @return
 *   An array of available icons for the specified theme.
 */
function icon_get_icons($theme, $reset = FALSE) {
  static $icons = array();

  if (!isset($icons[$theme]) || $reset) {
    if (!$reset && ($cache = cache_get('icon:'. $theme)) && !empty($cache->data)) {
      $icons[$theme] = $cache->data;
    }
    else {
      // Fetch icon sets, add data, sort as preferred.
      $iconsets = icon_get_iconsets($theme);
      icon_get_iconset_data($iconsets, $theme);
      uasort($iconsets, '_icon_sort_iconsets');

      // Combine all icons into one array.
      // TODO: Build an array of icons based on icons declared in themes and
      // modules, and use fallback to similar icons when none found.
      $icons[$theme] = array();
      foreach (array_reverse($iconsets) as $key => $iconset) {
        if ($iconset['status']) {
          $icons[$theme] = array_merge($icons[$theme], $iconset['icons']);
        }
      }

      // Cache the available icons.
      cache_set('icon:'. $theme, $icons[$theme]);
    }
  }

  return $icons[$theme];
}

/**
 * Rewrite stylesheets to add icons.
 */
function icon_rewrite_stylesheets($icons, $theme) {
  // Delete any existing stylesheet for this theme.
  if ($old_stylesheet = variable_get('icon_'. $theme .'_stylesheet', NULL)) {
    @unlink($old_stylesheet);
  }

  // Fetch stylesheets added with drupal_add_css().
  $css = drupal_add_css();

  // Combine all style sheets.
  $styles = '';
  foreach ($css as $types) {
    foreach ($types as $type) {
      foreach ($type as $path => $preprocess) {
        // Exclude any previously rewritten stylesheet.
        if ($path != $old_stylesheet) {
          $styles .= drupal_load_stylesheet($path, TRUE);
        }
      }
    }
  }

  // Create a new stylesheet to override icon paths in original stylesheets.
  $overrides = _icon_rewrite_stylesheet($styles, $icons, $theme);

  // Save the new stylesheet in the files directory.
  $filename = _icon_save_stylesheet($overrides, $theme);

  variable_set('icon_'. $theme .'_stylesheet', $filename);
}

/**
 * Rewrite a single stylesheet to add icons.
 */
function _icon_rewrite_stylesheet($styles, $icons, $theme) {
  $themes = list_themes();
  $theme = $themes[$theme];
  if ($theme->base_theme) {
    $theme = $themes[$theme->base_theme];
  }

  $chunks = preg_split('/\}/', $styles, -1, PREG_SPLIT_NO_EMPTY);

  foreach ($chunks as $chunk) {
    foreach ($theme->info['icons'] as $icon => $sizes) {
      foreach ($sizes as $size => $path) {
        if (strpos($chunk, $path)) {
          $new_icon = base_path() . $icons[$icon][$size];
          $selector = substr($chunk, 0, stripos($chunk, '{'));
          $output .= "$selector {background-image: url($new_icon) !important;}";
        }
      }
    }
  }
  return $output;
}

/**
 * Save the rewritten stylesheet to disk.
 *
 * @param $style
 *   Content of the stylesheet to save.
 * @return
 *   Filename of the saved stylesheet relative to the directory.
 */
function _icon_save_stylesheet($style, $theme) {
  // Prepare the directory.
  $directory = file_directory_path() .'/icon';
  file_check_directory($directory, FILE_CREATE_DIRECTORY);

  // Generate a filename.
  $filename = $directory .'/'. $theme .'-'. substr(md5($style . microtime()), 0, 8) .'.css';

  // Write new stylesheet.
  file_save_data($style, $filename, FILE_EXISTS_REPLACE);

  // Set standard file permissions for webserver-generated files.
  @chmod($file, 0664);

  return $filename;
}

/**
 * Array sorting callback; sorts icon sets.
 */
function _icon_sort_iconsets($a, $b) {
  if ($a['weight'] == $b['weight']) {
    // Sort by name if equal weights.
    return strcasecmp($a['name'], $b['name']);
  }
  else {
    return $a['weight'] > $b['weight'];
  }
}

/**
 * Theme function for the icon sets overview form.
 *
 * @param $form
 *   An associative array containing the structure of the form.
 * @see icon_iconsets_form()
 */
function theme_icon_iconsets_form($form) {
  drupal_add_tabledrag('icon-iconsets', 'order', 'sibling', 'iconset-weight');

  $header = array(
    t('Screenshot'),
    t('Name'),
    array('data' => t('Enabled'), 'class' => 'checkbox'),
    t('Weight')
  );

  $rows = array();
  foreach (element_children($form) as $key) {
    // Only look for icon sets.
    if (!isset($form[$key]['iconset'])) {
      continue;
    }

    $element = &$form[$key];
    $iconset = &$element['iconset']['#value'];

    // Add special classes to be used with tabledrag.js.
    $element['weight']['#attributes']['class'] .= 'iconset-weight';

    // Make it only possible to check/uncheck standalone icon sets.
    if ($iconset['type'] != 'iconset') {
      $element['status']['#attributes']['disabled'] = 'disabled';
      $element['status']['#value'] = '1';
    }

    // Style icon set info.
    $info = '<div class="iconset-info"><h2>'. $iconset['name'] .'</h2><div class="description">'. $iconset['description'] .'</div></div>';

    // Build row.
    $row = array();
    $row[] = drupal_render($element['screenshot']);
    $row[] = $info;
    $row[] = array('data' => drupal_render($element['status']), 'class' => 'checkbox', 'align' => 'center');
    $row[] = drupal_render($element['weight']);
    $rows[] = array('data' => $row, 'class' => 'draggable');
  }
  if (empty($rows)) {
    $rows[] = array(array('data' => t('No icon sets available.'), 'colspan' => '4'));
  }

  // Build the table and render the form.
  $output = theme('table', $header, $rows, array('id' => 'icon-iconsets')) . drupal_render($form);

  return $output;
}

/**
 * Theme function for displaying an icon.
 *
 * @param $name
 *   The name of the icon to display.
 * @param $size
 *   (optional) The desired size of the icon to display.
 * @return
 *   A string containing an image tag of the icon.
 */
function theme_icon($name, $size = '32') {
  global $icons;
  return theme('image', $icons[$name][$size]);
}
